name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          # Pin patch version to avoid Black warning on vulnerable 3.12.5
          python-version: '3.12.6'
      - name: Install system dependencies for PyQt6 (headless)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libegl1 \
            libgl1 \
            libxkbcommon-x11-0
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run comprehensive tests
        run: |
          chmod +x scripts/test.sh
          scripts/test.sh --all --coverage
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Lint
        run: |
          chmod +x scripts/test.sh
          scripts/test.sh --linting
      - name: Build artifact
        run: |
          pip install build
          python -m build
          
      - name: Upload Python packages
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*
          
  build-windows-exe:
    runs-on: windows-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12.6'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pyinstaller
      - name: Build Windows executable
        run: |
          scripts/build.ps1 -Executable
      - name: Test executable (CLI)
        run: |
          # Get version from version_info.txt
          $version = Get-Content "core\version_info.txt" -Raw | ForEach-Object { $_.Trim() }
          Write-Host "Testing executables for version: $version"
          
          $cli = "dist/MyPyTemplate-cli-$version.exe"
          $gui = "dist/MyPyTemplate-$version.exe"
          if ((Test-Path $cli) -and (Test-Path $gui)) {
            Write-Host "✅ Executables built successfully"
            # Test CLI executable with help (doesn't start GUI)
            & $cli --help-cli
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ CLI executable basic test passed"
            } else {
              Write-Error "❌ CLI executable test failed with exit code $LASTEXITCODE"
            }
          } else {
            Write-Error "❌ Executable(s) not found. Expected: $cli and $gui"
          }
      - name: Upload Windows executables
        run: |
          # Get version for upload paths
          $version = Get-Content "core\version_info.txt" -Raw | ForEach-Object { $_.Trim() }
          # Copy executables with generic names for consistent download
          Copy-Item "dist/MyPyTemplate-$version.exe" "dist/MyPyTemplate.exe"
          Copy-Item "dist/MyPyTemplate-cli-$version.exe" "dist/MyPyTemplate-cli.exe"
      - name: Upload Windows executables
        uses: actions/upload-artifact@v4
        with:
          name: windows-executables
          path: |
            dist/MyPyTemplate*.exe

  deploy-staging:
    needs: [build-test, build-windows-exe]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: dist/
      - name: Download Windows executables
        uses: actions/download-artifact@v4
        with:
          name: windows-executables
          path: dist/
      - name: List artifacts
        run: |
          echo "📦 Built artifacts:"
          ls -la dist/
      - name: Deploy to staging (placeholder)
        run: |
          echo "🚀 Ready for staging deployment"
          echo "Python packages: $(ls dist/*.whl dist/*.tar.gz 2>/dev/null | wc -l)"
          echo "Windows executable: $(ls dist/*.exe 2>/dev/null | wc -l)"

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production (placeholder)
        run: echo "🎯 Production deployment triggered by tag"
